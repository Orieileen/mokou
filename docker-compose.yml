# docker-compose.yml

services:
  db:
    image: mysql:8.0
    container_name: mokou_db
    env_file: ./.env
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - mokou_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:7-alpine
    container_name: mokou_redis
    networks:
      - mokou_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mokou_web
    env_file: ./.env
    # 这是项目创建好之后，用于开发的主命令
    command: sleep infinity
    volumes:
      - ./backend:/app
      - media_volume:/app/media
    ports:
      - "8000:8000"
    networks:
      - mokou_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mokou_worker
    env_file: ./.env
    command: sleep infinity
    volumes:
      - ./backend:/app
    networks:
      - mokou_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  frontend:
    build:
      context: ./frontend  # 假设你的前端代码将位于 ./frontend 文件夹中
      dockerfile: Dockerfile
    container_name: mokou_frontend
    ports:
      - "5173:5173"      # 将容器的 5173 端口映射到你电脑的 5173 端口
    volumes:
      - ./frontend:/app  # 将本地的前端代码挂载到容器中，以实现热更新
      - /app/node_modules # 一个重要技巧: 防止本地的 node_modules 覆盖容器中已安装的
    networks:
      - mokou_network
    restart: always
    command: npm run dev -- --host # 运行 Vite 开发服务器，并允许外部访问


volumes:
  mysql_data: {}
  media_volume: {}

networks:
  mokou_network:
    driver: bridge
